#1
linux下bash高级变量整理
 高级变量
基本形式
   [1].变量扩展  格式  ${变量名称}
   [2].命令扩展  格式  $(命令)
   [3].算术扩展  格式  $((算术式))
1.变量扩展
   基本形式:${变量名称}
   变量扩展含义:一种简易的条件判断,对不同的条件赋予变量不同的值替换.它和变量存在与否的关系很大.
  1.1 测试变量是否存在的基本用法
      语法: ${待测变量-默认值}
      说明:若待测变量不存在则符合判断条件,以传回默认值作为处置.
      解析:若待测变量不存在则返回默认值,否则返回变量的值
      实例:
           unset a
           echo ${a-'默认'}  #输出为'默认'
   1.2 测试变量不存在或其值为空时传回一个默认值
      语法:${待测变量:-默认值}
      实例:
           a=
           echo ${a:-'默认'} #输出为'默认'
    1.3 测试变量不存在或其值为空给变量赋予一个默认值
      语法:${待测变量:=默认值}
      实例:
           a=
           echo ${a:='默认'}
           echo $a #输出为2行'默认'
    1.4 测试变量不存在或其值为空,输出一个提示信息
      语法:${待测变量:?提示信息}
      实例:
           a=
           echo r={a:?提示信息} #输出"提示信息"
    1.5 测试变量存在且为非空则返回真值
 
      语法:${待测变量:+真值}
      实例:
          a=hello
          echo ${a:+world} #输出为"world"
    总结：
        符号     作用
         :       判断变量是否为空，若为空则为真
         +       正向，判断变量是否存在且不为空，若存在且不为空则为真
         -       反向，判断变量是否不存在，若不存在则为空
         =       赋值，
         ?       提示信息
2.取字符串切片，获得字符串长度
   2.1 取字符串切片
       语法:
          [1].${变量:开始的位置索引}
               作用：截取从指定的位置开始到字符串结束的所有字符,开始字符的索引为0
 
               实例：
                
                    str="hello world"
                    echo ${str:6} #输出结果为"world"
   
          [2].${变量:起始位置:长度}
               作用：截取从指定的起始位置开始的指定长度的字符串。
 
               实例：
                    str="hello world"
                    echo ${str:6:2} #输出为"wo"
    2.2 计算字符串长度
        语法：${#变量名称}
        实例:
             str="hello world"
             echo ${#str} #输出结果为11
3.对比样式
    目的:截取变量值(字符串)的某一个部分
    做法:将符合样式的部分字符串删除或替换
    3.1 由字符串前面开始对比删除最短的相符者
             语法:${待测变量#样式}
             说明:从待测变量的值的左边开始对比，删除最短符合样式的字符串
             实例：
  
                 filename="/usr/sbin/ntpdate"
                 echo ${filename#/*/} #显示结果sbin/ntpdate
    3.2 由字符串前面开始对比删除最长的相符者
             语法:${待测变量##样式}
             实例:
                filename="/usr/sbin/ntpdate"
                echo ${filename##/*/}  #显示结果ntpdate
    3.3 由字符串后面开始对比删除最短的相符者
             语法:${待测变量%样式}
             实例:
               filename="/usr/sbin/ntpdate"
               echo ${filename%/*} #输出结果/usr/sbin
    3.4 由字符串后面开始对比删除最长的相符者
             语法:${待测变量%%样式}
             实例:
               filename="hello/usr/sbin/ntpdate"
               echo ${filename%%/*} #输出结果hello
   
4.替换或删除部分字符串
 
   4.1 只替换找到的第一个字符串
        语法:${待测变量/样式/替换}
        实例：
             str="hello hello"
             echo ${str/hello/world}  #结果为world hello
   4.2 替换找到的所有样式字符串
        语法:${待测变量//样式/替换}
        实例：
             str="hello hello"
             echo ${str/hello/world}  #结果为world world
   4.3 删除第一个指定的字符串
        语法:${待测变量/要删除的字符串/}
        实例:
             str="hello hello"
             echo ${str/hello/}  #结果为hello
    4.4 删除所有指定的字符串
        语法:${待测变量//要删除的变量/}
        实例:
             str="hello world hello"
             echo ${str//hello/} #输出结果为world
5.命令扩展
    语法:$(命令)
    实例: time=$(date) 等价 time=`date`
6.算术扩展
    语法:$((算术))
    实例：

         echo "a=$((5*5))" #结果为a=25



原文地址:http://www.2cto.com/os/201109/103760.html

#2
https://www.cnblogs.com/lsgxeva/p/10696620.html
man bash

mkdir /usr/local/src/bash/{old,new,dist}
= mkdir /usr/local/src/bash/old /usr/local/src/bash/new /usr/local/src/bash/dist

变量扩展

我们知道，${var}的形式可以获取变量var的值，但其实还可以有更多花式玩法。其中～表示用户根目录其实属于 波浪线扩展，这比较常见，不展开介绍了。

下面的每种情况中，word 都要经过波浪线扩展，参数扩展，命令替换和 算术扩展。如果不进行子字符串扩展，bash 测试一个没有定义或值为空的 参数；忽略冒号的结果是只测试未定义的参数。

大致描述下变量扩展的功能：
扩展	功能
${var} 	获取变量值
${!var} 	取变量var的值做新的变量名，再次获取新变量名的值
${!prefix* 	获取prefix开头的变量名
${#parameter} 	获取变量长度
${parameter:-word} 	parameter为空时，使用wrod返回
${parameter:+word} 	parameter非空时，使用word返回
${parameter:=word} 	parameter为空时，使用word返回，同时把word赋值给parameter变量
${parameter:?word} 	parameter为空时，打印错误信息word
${parameter:offset} 	从offset位置截取字符串
${parameter:offset:length 	从offset位置截取length长度的字符串
${parameter#word} 	从头开始删除最短匹配word模式的内容后返回
${parameter##word} 	从头开始删除最长匹配word模式的内容后返回
${parameter%word} 	从尾开始删除最短匹配word模式的内容后返回
${parameter%%word} 	从尾开始删除最长匹配word模式的内容后返回
${parameter/pattern/string} 	最长匹配pattern的内容替换为string
${parameter//pattern/string} 	所有匹配pattern的内容替换为string

五、[](test)
[] 与test命令一样，用于比较值以及检查文件类型。如下：
1、[ "$A" = 123 ]：是字符串的测试，以测试 $A 是否为 1、2、3 这三个连续的"文字"。
2、[ "$A" -eq 123 ]：是整数的测试，以测试 $A 是否等于"一百二十三"。
3、[ -e "$A" ]：是关于文件的测试，以测试 123 这份"文件"是否存在。

六、[[]]
[[]]可以说是[]的“增强版”，它能够将多个test命令支持的测试组合起来，例如：

# [[ (-d "$HOME") && (-w "$HOME") ]] && echo echo "home is a writable directory"  

home is a writable directory

七、(())
(())专门来做数值运算，如果表达式求值为 0，则设置退出状态为 1；如果求值为非 0 值，则设置为 0。不需要对 (( 和 )) 之间的操作符转义。算术只对整数进行。除 0 会产生错误，但不会产生溢出。可以执行 C 语言中常见的算术、逻辑和位操作。如下：

# ((i=1+99));echo $i
100


也能：

# i=99;((i++));echo $i
100


除此之外，也可以使用$(())直接进行数值运算，如下：

# echo $((2**3))
8


注意：使用 (( )) 时，不需要空格分隔各值和运算符，使用[]和[[ ]] 时需要用空格分隔各值和运算符。 


